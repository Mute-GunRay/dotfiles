#+title: Literate Emacs Config
#+author: Tate Ray (Mute Gun-Ray)
#+description: A minimalist config for writing code and prose.


* Overview
** Purpose
My intent with this emacs configuration is to allow for it to serve as a stand in for a variety of tools. First, it serves as a robust text editor for both coding and prose writing. Secondly it serves as a scheduling tool.
** As Text Editor
*** As IDE
To fulfill the role of code editor emacs needed to have at least some of the features common to most modern IDEs. Namely:
+ Code completion
+ Git intergrations
+ Code snippets
+ LSP integrations
+ Syntax highlighting
To achieve this I utilize the following packages:
+ rainbow-delimiters
+ electric-pair mode
+ display-line-numbers-mode
+ eglot
+ gdscript-mode
+ corfu
+ YASnippets
*** As Word Processor
To fulfill the role of word processor it needed to be have the bare minimum:
+ Spell checking
+ grammar checking
+ word search
** As Scheduling Tool
For my own purposes of scheduling and time management I follow Cal Newports "Time Block" structure. To do this I use org-agenda with the org habits module. To supplement this I also make use of the org-alert package to give me push notifications on my scheduled tasks.
** Packages
|---------------------+---------------------------|
| *Name*                | *Purpose*                   |
|---------------------+---------------------------|
| straight.el         | package manager           |
| general.el          | keybindings               |
| rainbow-delimieters | color coded delimiters    |
| rainbow-mode        | hexcode highlighting      |
| spacious-padding    | padding around UI         |
| org-modern          | prettier org-mode         |
| corfu               | completion at point       |
| gdscript-mode       | gdscript major mode + lsp |
| vertico             | minibuffer improvments    |
| save-hist           | saves minibuffer commands |
| marginalia          | adds info to minibuffer   |
| magit               | Git intergrations         |
| forge               | further Git Intergrations |
| org-mode            | rich markdown mode +      |
| flycheck            | syntax checking           |
| flycheck-grammarly  | grammer checking          |
| YASnippets          | code snippets package     |
|---------------------+---------------------------|
** Keybinds
*** Cursor Movement
|------+-------------------------|
| *Keys* | *function*                |
|------+-------------------------|
| C-q  | moves back a word       |
| C-e  | moves forward a word    |
| C-s  | moves down one line     |
| C-w  | moves up one line       |
| C-a  | moves back one char     |
| C-d  | moves forwared one char |
|------+-------------------------|

*** Files
|-------+--------------|
| Keys  | function     |
|-------+--------------|
| C-f f | finds a file |
| C-f s | saves a file |
| C-f r | rename file  |
| C-f d | delete file  |
| C-f c | copy file    |
|-------+--------------|

*** Scroll Buffer
|-----+---------------------|
| *Key* | *function*            |
|-----+---------------------|
| C-k | scrolls buffer down |
| C-j | scrolls buffer up   |
| C-h | scroll down buffer  |
| C-l | scroll up buffer    |
|-----+---------------------|

*** Move Between Windows
|-----+---------------------------|
| *Key* | *function*                  |
|-----+---------------------------|
| M-w | move up across windows    |
| M-s | move down across windows  |
| M-a | move left across windows  |
| M-d | move right across windows |
|-----+---------------------------|

*** Copy and Paste
|-------+---------------------|
| *Key*   | *function*            |
|-------+---------------------|
| C-c c | copy-region-as-kill |
| C-c x | kill-region         |
| C-c v | paste               |
| C-c u | undo                |
|-------+---------------------|

*** Create Windows
|----------+---------------------------|
| *Key*      | *function*                  |
|----------+---------------------------|
| C-(pipe) | split window vertically   |
| C--      | split window horizontally |
|----------+---------------------------|

*** Org Mode
|-------+-------------------|
| *Keys*  | *function*          |
|-------+-------------------|
| C-o a | org agnda         |
| C-o t | create org tables |
|-------+-------------------|

*** Magit
|------+--------------|
| *Keys* | *function*     |
|------+--------------|
| C-m  | magit status |
|------+--------------|
** Builtin Options
#+begin_src emacs-lisp
  ;; Strips down frame
  (scroll-bar-mode -1) ;; turns OFF scroll bar
  (menu-bar-mode -1) ;; turns OFF menu bar
  (tool-bar-mode -1) ;; turns OFF tool bar

  ;; turn ON helpful modes
  (delete-selection-mode t)
  (global-auto-revert-mode t)
  (electric-pair-mode 1)

  ;; turn OFF unneeded options
  (electric-indent-mode nil)
  (setq initial-scratch-message nil)


  ;; mode specific hooks
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'visual-line-mode)

  ;; set backup directory
  (setq backup-directory-alist '((".*" . "~/.backups")))

  ;; turn OFF auto save features
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)

  ;; turns ON saving minibuffer history
  (savehist-mode 1)
  (setq history-length 25)

  ;; turns ON recent file opening
  (recentf-mode 1)

  ;; remember and restore last cursor location of opened file
  (save-place-mode 1)

  ;; allow loading all themes without checking safety 
  (setq custom-safe-themes t)
#+end_src
* Packages
** Straight.el
*** Details
**** Creator
Radian Software
**** Description
next-generation, purely functional package manager for the Emacs hacker.
**** [[https://github.com/radian-software/straight.el][Repo]]
*** Reasoning
Using straight.el for package management along with its use-package integrations. Other package manager packages exist but this one is simple, easy to use, and no frills.
*** Source Block
#+begin_src emacs-lisp
  (defvar bootstrap-version)

  (let ((bootstrap-file
  	 (expand-file-name
  	  "straight/repos/straight.el/bootstrap.el"
  	  (or (bound-and-true-p straight-base-dir)
  	      user-emacs-directory)))
  	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	  (url-retrieve-synchronously
  	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	   'silent 'inhibit-cookies)
  	(goto-char (point-max))
  	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (defun set-exec-path-from-shell-PATH ()
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
  			    "[ \t\n]*$" "" (shell-command-to-string
  					    "$SHELL --login -c 'echo $PATH'"
  						      ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+end_src
** General.el
*** Details
**** Creator
noctuid
**** Description
general.el provides a more convenient method for binding keys in emacs.
**** [[https://github.com/noctuid/general.el?tab=readme-ov-file#about][Repo]]
*** Reasoning
Using general.el allows for a more streamlined process of defining custom keybinds. Keybinds are bundled by broad catagories. A table in the overview section has a table listing all custom keybinds.
*** Source Block
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config (general-auto-unbind-keys))

  ;; These are keybinds for basic functions
  (general-define-key
   ;; cursor movement
    "C-q" 'backward-word
    "C-e" 'forward-word
    "C-s" 'next-line
    "C-w" 'previous-line
    "C-a" 'backward-char
    "C-d" 'forward-char
    ;; file manipulation
    "C-f f" 'find-file
    "C-f s" 'save-buffer
    "C-f d" 'delete-file
    "C-f c" 'copy-file
    "C-f r" 'rename-file
    "C-f n" 'recentf-open
    ;; scroll buffer
    "C-j" 'scroll-up-line
    "C-k" 'scroll-down-line
    "C-h" 'scroll-down-command
    "C-l" 'scroll-up-command
    ;; move between windows
    "M-w" 'windmove-up
    "M-s" 'windmove-down
    "M-a" 'windmove-left
    "M-d" 'windmove-right
    ;; copy and past
    "C-c u" 'undo
    "C-c v" 'yank
    "C-c x" 'kill-region
    "C-c c" 'copy-region-as-kill
    ;; split windows
    "C-|" 'split-window-right
    "C--" 'split-window-below)

  ;; These are keybindings for org-mode
  (general-define-key
   "C-o a" 'org-agenda
   "C-o t" 'org-create-table
   "C-o c" 'org-capture)

  ;; These are keybindings for magit


#+end_src

** Rainbow Delimiters
*** Details
**** Creator
Fanael
**** Description
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.
**** [[https://github.com/Fanael/rainbow-delimiters][Repo]]
*** Reasoning
Color codes delimiters for ease of parsing while coding.
*** Sourc Block
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t)

  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

** Rainbow Mode
*** Details
**** Creator
tarsius
**** Description
Adds an overview to hex codes to display the color it renders.
**** [[https://github.com/emacsmirror/rainbow-mode][Repo]]
*** Reasoning
Allows for at a glance viewing of colors.
*** Source Block
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :hook (prog-mode text-mode))
#+end_src

** Spacious Padding
*** Details
**** Creator
Protesilaos
**** Description
This package provides a global minor mode to increase the spacing/padding of Emacs windows and frames.
**** [[https://github.com/protesilaos/spacious-padding][Repo]]
*** Reasoning
Adds padding around certain UI elements such as buffers and mode line elements
*** Source Block
#+begin_src emacs-lisp
  (use-package spacious-padding
    :straight t
    :custom
    (spacious-padding-subtle-mode-line t)
    :config
    (spacious-padding-mode 1))
#+end_src

** Org Modern
*** Details
**** Creator
minad
**** Description
This package implements a modern style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks.
**** [[https://github.com/minad/org-modern][Repo]]
*** Reasoning
This is added for ease of customizing and beautifying org mode documents.
*** Source Block
#+begin_src emacs-lisp
  (use-package org-modern
    :straight t
    :hook (org-mode . org-modern-mode))

#+end_src

** Corfu
*** Details
**** Creator
minad
**** Details
Corfu enhances in-buffer completion with a small completion popup.
**** [[https://github.com/minad/corfu][Repo]]
*** Reasoning
Gives intellisense like functionality.
*** Source Block
#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :custom
      (corfu-cycle t)
      (corfu-preview-current t)
    :init
    (global-corfu-mode))

#+end_src
** GDScript Mode
*** Details
**** Creator
Godo Engine
**** Details
This package adds support for the GDScript programming language from the Godot game engine in Emacs. It gives syntax highlighting and indentations.
**** [[https://github.com/godotengine/emacs-gdscript-mode][Repo]]
*** Reasoning
Allows for ease of use when using emacs as a default editor with the godot game engine
*** Source Block
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :straight (gdscript-mode
	       :type git
	       :host github
	       :repo "godotengine/emacs-gdscript-mode")
    :hook (gdscript-mode . eglot-ensure))
#+end_src
** Vertico
*** Details
**** Creator
minad
**** Description
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system.
**** [[https://github.com/minad/vertico][Repo]]
*** Reasoning
Enhances default minibuffer completion
*** Source Block
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :custom
    (vertico-scroll-margin 5)
    (vertico-count 5)
    (vertico-resize nil)
    (vertico-cycle t)
    :init
    (vertico-mode))
  #+end_src
** Marginalia
*** Details
**** Creator
minad
**** Description
This package provides marginalia-mode which adds marginalia to the minibuffer completions. Marginalia are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates.
**** [[https://github.com/minad/marginalia][Repo]]
*** Reasoning
Assists in chosing the right command in the minibuffer
*** Source Block
#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :init (marginalia-mode))
#+end_src
** Magit
*** Details
**** Creator
tarsius
**** Description
Magit is an interface to the version control system Git, implemented as an Emacs package.
**** [[https://github.com/magit/magit][Repo]]
*** Reasoning
Allows for in window handling of most git commands streamlining the version control process
*** Source Block
#+begin_src emacs-lisp
  (use-package magit
    :straight t)


#+end_src
** Forge
*** Details
**** Creator
tarsius
**** Details
Work with Git forges, such as Github and Gitlab, from the comfort of Magit and the rest of Emacs.
**** [[https://github.com/magit/forge][Repo]]
*** Reasoning
Further streamlines in window Git integrations
*** Source Block
#+begin_src emacs-lisp
  (use-package forge
    :straight t
    :after magit)

  (setq auth-sources '("~/.authinfo"))
#+end_src
** Org
#+begin_src emacs-lisp
  (setq org-todo-keywords '("TODO(t)" "HOLDING(h)" "RESCHEDULE(r)" "|" "CANCELLED(c)" "DONE(d)"))

  (setq org-capture-templates
        '(("t" "Task" entry
  	 (file buffer-name)
  	 "**** %^{ TASK } %^g")))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
  (setq org-habit-completed-glyph "+")
  (setq org-habit-following-days 0)
  (setq org-habit-preceding-days 7)
  (setq org-habit-show-done-always-green t)

  (setq org-agenda-files '("~/Documents/Agenda/"))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-custom-commands
        '(( "t" "Today"
    	((agenda "" ((org-agenda-span 'day)))))))

  (add-hook 'org-mode-hook 'org-indent-mode)

  (use-package org-modern-indent
    :straight (org-modern-indent :type git
  			       :host github
  			       :repo "jdtsmith/org-modern-indent")
    :config
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))

  (setq org-hide-emphasis-markers t)

  (use-package visual-fill-column
    :straight t
    :hook (org-mode . visual-fill-column-mode)
    :custom
    (visual-fill-column-width 100)
    (visual-fill-column-center-text t))
#+end_src
** Flycheck
*** Details
**** Creator
Flycheck
**** Description
Flycheck provides modern on-the-fly syntax checking extension for GNU Emacs 24, intended as replacement for the older Flymake extension which is part of GNU Emacs.
*** Reasoning
Allows for spell and grammar checking
*** Source Block
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
  (use-package flycheck-grammarly
    :straight t)
#+end_src
** Auto Themer
*** Details
**** Creator
jasonm23
**** Description
Autothemer provides autothemer-deftheme a macro wrapper for deftheme and custom-theme-set-faces which creates a custom color theme.
**** [[https://github.com/jasonm23/autothemer][Repo]]
*** Reasoning
This streamlines the creation of a custom theme.
*** Source Block
#+begin_src emacs-lisp
  (use-package autothemer
    :straight t)

  (add-to-list 'custom-theme-load-path "~/.dotfiles/.emacs.d/themes/")
  (load-theme 'my t)
#+end_src
** Tempel
*** Details
**** Creator
minad
**** Description
Tempel is a tiny template package for Emacs, which uses the syntax of the Emacs Tempo library. Tempo is an ancient temple of the church of Emacs. It is 30 years old, but still in good shape since it successfully resisted change over the decades. However it may look a bit dusty here and there. Therefore we present Tempel, a new implementation of Tempo with inline expansion and integration with recent Emacs facilities. Tempel takes advantage of the standard completion-at-point-functions mechanism which is used by Emacs for in-buffer completion.
**** [[https://github.com/minad/tempel?tab=readme-ov-file][Repo]]
*** Reasoning
Using snippets for creating basic code structures in a fast and efficient way
*** Source Block
#+begin_src emacs-lisp
  ;; Configure Tempel
  (use-package tempel
    :straight t
    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))
    :init
    (defun tempel-setup-capf ()
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))
    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf))

  (use-package tempel-collection
    :straight t)
#+end_src
